/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CourseSchema
 */
export interface CourseSchema {
    /**
     * 
     * @type {string}
     * @memberof CourseSchema
     */
    'subject_code': string;
    /**
     * 
     * @type {string}
     * @memberof CourseSchema
     */
    'subject_desc': string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseSchema
     */
    'catalog_number': string;
    /**
     * 
     * @type {string}
     * @memberof CourseSchema
     */
    'description': string | null;
    /**
     * 
     * @type {number}
     * @memberof CourseSchema
     */
    'min_credits': number;
    /**
     * 
     * @type {number}
     * @memberof CourseSchema
     */
    'max_credits': number;
    /**
     * 
     * @type {Array<SectionSchema>}
     * @memberof CourseSchema
     */
    'sections'?: Array<SectionSchema>;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface MeetingSchema
 */
export interface MeetingSchema {
    /**
     * 
     * @type {Array<string>}
     * @memberof MeetingSchema
     */
    'days_of_week': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MeetingSchema
     */
    'time_start': string | null;
    /**
     * 
     * @type {string}
     * @memberof MeetingSchema
     */
    'time_end': string | null;
    /**
     * 
     * @type {string}
     * @memberof MeetingSchema
     */
    'location': string | null;
}
/**
 * 
 * @export
 * @interface ProfessorSchema
 */
export interface ProfessorSchema {
    /**
     * 
     * @type {number}
     * @memberof ProfessorSchema
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProfessorSchema
     */
    'name': string | null;
}
/**
 * 
 * @export
 * @interface SectionProfessorSchema
 */
export interface SectionProfessorSchema {
    /**
     * 
     * @type {string}
     * @memberof SectionProfessorSchema
     */
    'role': string | null;
    /**
     * 
     * @type {ProfessorSchema}
     * @memberof SectionProfessorSchema
     */
    'professor': ProfessorSchema;
}
/**
 * 
 * @export
 * @interface SectionSchema
 */
export interface SectionSchema {
    /**
     * 
     * @type {number}
     * @memberof SectionSchema
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SectionSchema
     */
    'section_catalog': string;
    /**
     * 
     * @type {string}
     * @memberof SectionSchema
     */
    'instruction_type': string | null;
    /**
     * 
     * @type {number}
     * @memberof SectionSchema
     */
    'enrollment_cap': number | null;
    /**
     * 
     * @type {number}
     * @memberof SectionSchema
     */
    'enrollment_total': number | null;
    /**
     * 
     * @type {number}
     * @memberof SectionSchema
     */
    'waitlist_cap': number | null;
    /**
     * 
     * @type {number}
     * @memberof SectionSchema
     */
    'waitlist_total': number | null;
    /**
     * 
     * @type {Array<SectionProfessorSchema>}
     * @memberof SectionSchema
     */
    'professors'?: Array<SectionProfessorSchema>;
    /**
     * 
     * @type {Array<MeetingSchema>}
     * @memberof SectionSchema
     */
    'meetings'?: Array<MeetingSchema>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Classes
         * @param {string} subject 
         * @param {string} catalogNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesClassesGet: async (subject: string, catalogNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject' is not null or undefined
            assertParamExists('classesClassesGet', 'subject', subject)
            // verify required parameter 'catalogNumber' is not null or undefined
            assertParamExists('classesClassesGet', 'catalogNumber', catalogNumber)
            const localVarPath = `/classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (catalogNumber !== undefined) {
                localVarQueryParameter['catalog_number'] = catalogNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Classes
         * @param {string} subject 
         * @param {string} catalogNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classesClassesGet(subject: string, catalogNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classesClassesGet(subject, catalogNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.classesClassesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Classes
         * @param {string} subject 
         * @param {string} catalogNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesClassesGet(subject: string, catalogNumber: string, options?: RawAxiosRequestConfig): AxiosPromise<CourseSchema> {
            return localVarFp.classesClassesGet(subject, catalogNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Classes
     * @param {string} subject 
     * @param {string} catalogNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public classesClassesGet(subject: string, catalogNumber: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).classesClassesGet(subject, catalogNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



